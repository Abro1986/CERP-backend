import sys
import os
import subprocess

def run():
    if sys.platform == 'linux' or sys.platform == 'darwin':
        subprocess.call('FLASK_APP=app.py FLASK_DEBUG=1 flask run', shell=True)
        return

    if sys.platform == 'win32':
        subprocess.call("$env:FLASK_DEBUG = 1", shell=True)
        subprocess.call('$env:FLASK_APP = "app.py"', shell=True)
        subprocess.call("flask run", shell=True)
        return

    print("OS not known")

def coverage(auto=False):
    subprocess.call('coverage run --omit=venv/* --source=cerp -m unittest discover tests/', shell=True)
    if not auto:
        subprocess.call('coverage html', shell=True)
        subprocess.call('xdg-open htmlcov/index.html', shell=True)

def test():
    subprocess.call('python -m unittest discover tests/', shell=True)

def help_cmd():
    print("""
    CERP backend management tool.

    On windows assumes PowerShell
    On linux-like assumes bash (shell)

    run \t\tr \tRuns the application
    test \t\tt \tTests the application
    coverage \t\tc \tRuns the coverage report
    coverage_auto \tca \tRuns the coverage command, without showing results (for automated systems)
    help \t\th \tRuns this command
    """)

def manage(args):
    if len(args) != 1:
        print("Arguement count invalid")
        return
    arg = args[0]
    if arg == 'help' or arg == 'h':
        help_cmd()
        return
    if arg == 'run' or arg == 'r':
        run()
        return
    if arg == 'test' or arg == 't':
        test()
        return
    if arg == 'coverage' or arg == 'c':
        coverage()
        return
    if arg == 'coverage_auto' or arg == 'ca':
        coverage(auto=True)
        return

    print("Unknown Command")

if __name__ == '__main__':
    manage(sys.argv[1:])
